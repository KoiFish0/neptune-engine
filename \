#define STB_IMAGE_IMPLEMENTATION
#include <string>

#include "stb_image.h"


class Texture {
private:
public:
  // TODO automatically find width/height by querying image height
  void loadTexture(const std::string path, int width, int height) {
    unsigned int texture;
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_2D, texture);
    // set the texture wrapping/filtering options (on the currently bound texture object)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // load and generate the texture
    int width, height, nrChannels;
    unsigned char *data = stbi_load("container.jpg", &width, &height, &nrChannels, 0);
    if (data){
      glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
      glGenerateMipmap(GL_TEXTURE_2D);
    } else {
      std::cout << "Failed to load texture" << std::endl;
    }

    stbi_image_free(data);
    int nrChannels = 3;
    unsigned char *data = stbi_load(path, &width, &height, &nrChannels, 0);

    // Initialize 1 texture and hand it to 'texture'
    unsigned int texture;
    glGenTextures(1, &texture);  

    // Bind the texture to be used later
    glBindTexture(GL_TEXTURE_2D, texture);

    // Generate the texture from the loaded image (data)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

    // Use mipmaps to reduce memory allocation
    glGenerateMipmap(GL_TEXTURE_2D);
  }
}
